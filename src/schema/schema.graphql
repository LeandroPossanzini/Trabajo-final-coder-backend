
"Definiciones de los tipos de raiz"
type Query{
    users: ResultUsers
    "Para iniciar sesion de usuario"
    login(email: String!, password: String!) : ResultLogin
    "Autenticar mendiante token"
    me: ResultUser
}

type Mutation {
    register(user : UserInput!): ResultUser
}

"Iterface para especificar las propiedades obligatorias"
interface Result {
    "Estado de la operacion"
    status: Boolean!
    "Mensaje de la operacion para dar un feedback"
    message: String!
}

type ResultUsers implements Result {
    "Estado de la operacion"
    status: Boolean!
    "Mensaje de la operacion para dar un feedback"
    message: String!
    users: [User!]!
}

type ResultUser implements Result {
    "Estado de la operacion"
    status: Boolean!
    "Mensaje de la operacion para dar un feedback"
    message: String!
    "Informacion del usuario"
    user: User
}

type ResultLogin implements Result {
    "Estado de la operacion"
    status: Boolean!
    "Mensaje de la operacion para dar un feedback"
    message: String!
    "Informacion del token del usuario logueado"
    token: String
}

"Informacion del usuario "
type User {
    "Identificador Unico"
    id: ID!
    "Nombre de Usuario"
    name: String!
    "Apellido del usuario"
    lastname: String!
    "Email del usuario"
    email: String!
    "Contraseña"
    password: String!
    registerDate: String!
    birthday: String!
    "Permisos del usuario"
    role: Role!
}
"Input importante para que el tipo de role sea por defecto CLIENT"
input UserInput {
    id:ID
    "Nombre de Usuario"
    name: String!
    "Apellido del usuario"
    lastname: String!
    "Email del usuario"
    email: String!
    "Contraseña"
    password: String!
    "Fecha para comprobar que es mayor de 18 años"
    birthday: String!
    "Permisos del usuario"
    role: Role=CLIENT

}

enum Role {
    CLIENT
    ADMIN
}